{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-nativestorage/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_nativestorage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-nativestorage/lib.npmtest_cordova_plugin_nativestorage.js":"/* istanbul instrument in package npmtest_cordova_plugin_nativestorage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_nativestorage = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_nativestorage = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-nativestorage/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-nativestorage && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_nativestorage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_nativestorage\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_nativestorage.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_nativestorage.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_nativestorage.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_nativestorage.__dirname + '/lib.npmtest_cordova_plugin_nativestorage.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-nativestorage/node_modules/cordova-plugin-nativestorage/www/LocalStorageHandle.js":"var NativeStorageError = require('./NativeStorageError');\n\n// args = [reference, variable]\nfunction LocalStorageHandle(success, error, intent, operation, args) {\n    var reference = args[0];\n    var variable = args[1];\n\n    if (operation.startsWith('put') || operation.startsWith('set')) {\n        try {\n            var varAsString = JSON.stringify(variable);\n            if (reference === null) {\n                error(new NativeStorageError(NativeStorageError.NULL_REFERENCE, \"JS\", \"\"));\n                return;\n            }\n            localStorage.setItem(reference, varAsString);\n            success(variable);\n        } catch (err) {\n            error(new NativeStorageError(NativeStorageError.JSON_ERROR, \"JS\", err));\n        }\n    } else if (operation.startsWith('get')) {\n        var item = {};\n        item = localStorage.getItem(reference);\n        if (item === null) {\n            error(new NativeStorageError(NativeStorageError.ITEM_NOT_FOUND,\"JS\",\"\"));\n            return;\n        }\n        try {\n            var obj = JSON.parse(item);\n            //console.log(\"LocalStorage Reading: \"+obj);\n            success(obj);\n        } catch (err) {\n            error(new NativeStorageError(NativeStorageError.JSON_ERROR, \"JS\", err));\n        }\n    } else if (operation === 'keys') {\n      var keys = [];\n      var key = localStorage.key(0);\n      if(!key) {\n        return success(keys);\n      }\n      var i = 0;\n      while(key) {\n        keys.push(key);\n        i++;\n        key = localStorage.key(i);\n      }\n      success(keys);\n    }\n}\nmodule.exports = LocalStorageHandle;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-nativestorage/node_modules/cordova-plugin-nativestorage/www/NativeStorageError.js":"/**\n * NativeStorageError\n * @constructor\n */\nvar NativeStorageError = function(code, source, exception) {\n    this.code = code || null;\n    this.source = source || null;\n    this.exception = exception || null;\n};\n\nNativeStorageError.NATIVE_WRITE_FAILED = 1;\nNativeStorageError.ITEM_NOT_FOUND = 2;\nNativeStorageError.NULL_REFERENCE = 3;\nNativeStorageError.UNDEFINED_TYPE = 4;\nNativeStorageError.JSON_ERROR = 5;\nNativeStorageError.WRONG_PARAMETER = 6;\n\nmodule.exports = NativeStorageError;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-nativestorage/node_modules/cordova-plugin-nativestorage/www/mainHandle.js":"var inBrowser = false;\nvar NativeStorageError = require('./NativeStorageError');\n\n\nfunction isInBrowser() {\n  inBrowser = (window.cordova && (window.cordova.platformId === 'browser' || window.cordova.platformId === 'osx')) || !(window.phonegap || window.cordova);\n  return inBrowser;\n}\n\nfunction storageSupportAnalyse() {\n  if (!isInBrowser()) {\n    return 0;\n  //storageHandlerDelegate = exec;\n  } else {\n    if (window.localStorage) {\n      return 1;\n    //storageHandlerDelegate = localStorageHandle;\n    } else {\n      return 2;\n    //console.log(\"ALERT! localstorage isn't supported\");\n    }\n  }\n}\n\n//if storage not available gracefully fails, no error message for now\nfunction StorageHandle() {\n  this.storageSupport = storageSupportAnalyse();\n  switch (this.storageSupport) {\n    case 0:\n      var exec = require('cordova/exec');\n      this.storageHandlerDelegate = exec;\n      break;\n    case 1:\n      var localStorageHandle = require('./LocalStorageHandle');\n      this.storageHandlerDelegate = localStorageHandle;\n      break;\n    case 2:\n      console.log(\"ALERT! localstorage isn't supported\");\n      break;\n    default:\n      console.log(\"StorageSupport Error\");\n      break;\n  }\n}\n\n\nStorageHandle.prototype.set = function(reference, value, success, error) {\n  if (reference === null) {\n    error(\"The reference can't be null\");\n    return;\n  }\n  if (value === null) {\n    error(\"a Null value isn't supported\");\n    return;\n  }\n  switch (typeof value) {\n    case 'undefined':\n      error(\"an undefined type isn't supported\");\n      break;\n    case 'boolean': {\n      this.putBoolean(reference, value, success, error);\n      break;\n    }\n    case 'number': {\n      // Good now check if it's a float or an int\n      if (value === +value) {\n        if (value === (value | 0)) {\n          // it's an int\n          this.putInt(reference, value, success, error);\n        } else if (value !== (value | 0)) {\n          this.putDouble(reference, value, success, error);\n        }\n      } else {\n        error(\"The value doesn't seem to be a number\");\n      }\n      break;\n    }\n    case 'string': {\n      this.putString(reference, value, success, error);\n      break;\n    }\n    case 'object': {\n      this.putObject(reference, value, success, error);\n      break;\n    }\n    default:\n      error(\"The type isn't supported or isn't been recognized\");\n      break;\n  }\n};\n\n/* removing */\nStorageHandle.prototype.remove = function(reference, success, error) {\n  if (reference === null) {\n    error(\"Null reference isn't supported\");\n    return;\n  }\n\n  if (inBrowser) {\n    try {\n      localStorage.removeItem(reference);\n      success();\n    } catch (e) {\n      error(e);\n    }\n  } else {\n    this.storageHandlerDelegate(success, error, \"NativeStorage\", \"remove\", [reference]);\n  }\n};\n\n/* clearing */\nStorageHandle.prototype.clear = function(success, error) {\n  if (inBrowser) {\n    try {\n      localStorage.clear();\n      success();\n    } catch (e) {\n      error(e);\n    }\n  } else {\n    this.storageHandlerDelegate(success, error, \"NativeStorage\", \"clear\", []);\n  }\n};\n\n\n/* boolean storage */\nStorageHandle.prototype.putBoolean = function(reference, aBoolean, success, error) {\n  if (reference === null) {\n    error(\"Null reference isn't supported\");\n    return;\n  }\n\n  if (aBoolean === null) {\n    error(\"a Null value isn't supported\");\n    return;\n  }\n\n  if (typeof aBoolean === 'boolean') {\n    this.storageHandlerDelegate(function(returnedBool) {\n      if ('string' === typeof returnedBool) {\n        if ( (returnedBool === 'true') ) {\n          success(true);\n        } else if ( (returnedBool === 'false') ) {\n          success(false);\n        } else {\n          error(\"The returned boolean from SharedPreferences was not recognized: \" + returnedBool);\n        }\n      } else {\n        success(returnedBool);\n      }\n    }, error, \"NativeStorage\", \"putBoolean\", [reference, aBoolean]);\n  } else {\n    error(\"Only boolean types are supported\");\n  }\n};\n\n\nStorageHandle.prototype.getBoolean = function(reference, success, error) {\n  if (reference === null) {\n    error(\"Null reference isn't supported\");\n    return;\n  }\n  this.storageHandlerDelegate(function(returnedBool) {\n    if ('string' === typeof returnedBool) {\n      if ( (returnedBool === 'true') ) {\n        success(true);\n      } else if ( (returnedBool === 'false') ) {\n        success(false);\n      } else {\n        error(\"The returned boolean from SharedPreferences was not recognized: \" + returnedBool);\n      }\n    } else {\n      success(returnedBool);\n    }\n  }, error, \"NativeStorage\", \"getBoolean\", [reference]);\n};\n\n/* int storage */\nStorageHandle.prototype.putInt = function(reference, anInt, success, error) {\n  if (reference === null) {\n    error(\"Null reference isn't supported\");\n    return;\n  }\n  this.storageHandlerDelegate(success, error, \"NativeStorage\", \"putInt\", [reference, anInt]);\n};\n\nStorageHandle.prototype.getInt = function(reference, success, error) {\n  if (reference === null) {\n    error(\"Null reference isn't supported\");\n    return;\n  }\n  this.storageHandlerDelegate(success, error, \"NativeStorage\", \"getInt\", [reference]);\n};\n\n\n/* float storage */\nStorageHandle.prototype.putDouble = function(reference, aFloat, success, error) {\n  if (reference === null) {\n    error(\"Null reference isn't supported\");\n    return;\n  }\n  this.storageHandlerDelegate(success, error, \"NativeStorage\", \"putDouble\", [reference, aFloat]);\n};\n\nStorageHandle.prototype.getDouble = function(reference, success, error) {\n  if (reference === null) {\n    error(\"Null reference isn't supported\");\n    return;\n  }\n  this.storageHandlerDelegate(function(data) {\n    if (isNaN(data)) {\n      error('Expected double but got non-number');\n    } else {\n      success(parseFloat(data));\n    }\n  }, error, \"NativeStorage\", \"getDouble\", [reference]);\n};\n\n/* string storage */\nStorageHandle.prototype.putString = function(reference, s, success, error) {\n  if (reference === null) {\n    error(\"Null reference isn't supported\");\n    return;\n  }\n  this.storageHandlerDelegate(success, error, \"NativeStorage\", \"putString\", [reference, s]);\n};\n\nStorageHandle.prototype.getString = function(reference, success, error) {\n  if (reference === null) {\n    error(\"Null reference isn't supported\");\n    return;\n  }\n  this.storageHandlerDelegate(success, error, \"NativeStorage\", \"getString\", [reference]);\n};\n\n/* object storage  COMPOSITE AND DOESNT CARE FOR BROWSER*/\nStorageHandle.prototype.putObject = function(reference, obj, success, error) {\n  var objAsString = \"\";\n  try {\n    objAsString = JSON.stringify(obj);\n  } catch (err) {\n    error(err);\n  }\n  this.putString(reference, objAsString, function(data) {\n    var obj = {};\n    try {\n      obj = JSON.parse(data);\n      success(obj);\n    } catch (err) {\n      error(err);\n    }\n  }, error);\n};\n\nStorageHandle.prototype.getObject = function(reference, success, error) {\n  this.getString(reference, function(data) {\n    var obj = {};\n    try {\n      obj = JSON.parse(data);\n      success(obj);\n    } catch (err) {\n      error(err);\n    }\n  }, error);\n};\n\n/* API >= 2 */\nStorageHandle.prototype.setItem = function(reference, obj, success, error) {\n  var objAsString = \"\";\n  try {\n    objAsString = JSON.stringify(obj);\n  } catch (err) {\n    error(new NativeStorageError(NativeStorageError.JSON_ERROR, \"JS\", err));\n    return;\n  }\n  if (reference === null) {\n    error(new NativeStorageError(NativeStorageError.NULL_REFERENCE, \"JS\", \"\"));\n    return;\n  }\n  this.storageHandlerDelegate(function(data) {\n    try {\n      obj = JSON.parse(data);\n      success(obj);\n    } catch (err) {\n      error(new NativeStorageError(NativeStorageError.JSON_ERROR, \"JS\", err));\n    }\n  }, function(code) {\n    error(new NativeStorageError(code, \"Native\", \"\"));\n  }, \"NativeStorage\", \"setItem\", [reference, objAsString]);\n};\n\nStorageHandle.prototype.getItem = function(reference, success, error) {\n  if (reference === null) {\n    error(new NativeStorageError(NativeStorageError.NULL_REFERENCE, \"JS\", \"\"));\n    return;\n  }\n  var obj = {};\n\n  this.storageHandlerDelegate(\n    function(data) {\n      try {\n        obj = JSON.parse(data);\n        success(obj);\n      } catch (err) {\n        error(new NativeStorageError(NativeStorageError.JSON_ERROR, \"JS\", err));\n      }\n    },\n    function(code) {\n      error(new NativeStorageError(code, \"Native\", \"\"));\n    }, \"NativeStorage\", \"getItem\", [reference]);\n};\n\n/* API >= 2 */\nStorageHandle.prototype.setSecretItem = function(reference, obj, encryptConfig, success, error) {\n  var objAsString = \"\";\n  try {\n    objAsString = JSON.stringify(obj);\n  } catch (err) {\n    error(new NativeStorageError(NativeStorageError.JSON_ERROR, \"JS\", err));\n    return;\n  }\n  if (reference === null) {\n    error(new NativeStorageError(NativeStorageError.NULL_REFERENCE, \"JS\", \"\"));\n    return;\n  }\n\n  var action = \"setItem\";\n  var params = [reference, objAsString];\n  switch (encryptConfig.mode) {\n    case \"password\":\n      action = \"setItemWithPassword\";\n      params = [reference, objAsString, encryptConfig.value];\n      break;\n    case \"key\":\n      action = \"setItemWithKey\";\n      break;\n    case \"none\":\n      break;\n    default: {\n      error(new NativeStorageError(NativeStorageError.WRONG_PARAMETER, \"JS\", \"\"));\n      return;\n    }\n  }\n  this.storageHandlerDelegate(function(data) {\n    try {\n      obj = JSON.parse(data);\n      success(obj);\n    } catch (err) {\n      error(new NativeStorageError(NativeStorageError.JSON_ERROR, \"JS\", err));\n    }\n  }, function(code) {\n    error(new NativeStorageError(code, \"Native\", \"\"));\n  }, \"NativeStorage\", action, params);\n};\n\nStorageHandle.prototype.getSecretItem = function(reference, encryptConfig, success, error) {\n  if (reference === null) {\n    error(new NativeStorageError(NativeStorageError.NULL_REFERENCE, \"JS\", \"\"));\n    return;\n  }\n  var obj = {};\n\n  var action = \"getItem\";\n  var params = [reference];\n  switch (encryptConfig.mode) {\n    case \"password\":\n      action = \"getItemWithPassword\";\n      params = [reference, encryptConfig.value];\n      break;\n    case \"key\":\n      action = \"getItemWithKey\";\n      break;\n    case \"none\":\n      break;\n    default: {\n      error(new NativeStorageError(NativeStorageError.WRONG_PARAMETER, \"JS\", \"\"));\n      return;\n    }\n  }\n\n  this.storageHandlerDelegate(\n    function(data) {\n      try {\n        obj = JSON.parse(data);\n        success(obj);\n      } catch (err) {\n        error(new NativeStorageError(NativeStorageError.JSON_ERROR, \"JS\", err));\n      }\n    },\n    function(code) {\n      error(new NativeStorageError(code, \"Native\", \"\"));\n    }, \"NativeStorage\", action, params);\n};\n\n/* list keys */\nStorageHandle.prototype.keys = function(success, error) {\n  this.storageHandlerDelegate(success, error, \"NativeStorage\", \"keys\");\n};\n\n\nvar storageHandle = new StorageHandle();\nmodule.exports = storageHandle;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-nativestorage/node_modules/cordova-plugin-nativestorage/src/windows/NativeStorage.js":"/**\n * Created by Christian on 30.08.2016.\n * christian@helbighof.de\n */\n\nvar package = Windows.ApplicationModel.Package.current;\nvar service = package.id.name\n\nvar NativeStorageProxy = {\n    getItem: function (win, fail, args) {\n        try {\n            var key = args[0];\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            var passwordCredential = vault.retrieve(service, key);\n            win(passwordCredential.password);\n        } catch (e) {\n            fail(2);\n        }\n    },\n    setItem: function (win, fail, args) {\n        try {\n            var key = args[0];\n            var value = args[1];\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            vault.add(new Windows.Security.Credentials.PasswordCredential(service, key, value));\n            win(value);\n        } catch (e) {\n            fail(1);\n        }\n    },\n    clear: function (win, fail, args) {\n        //todo: Clear all values in NativeStorage\n        try {\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            var iVectorView = vault.retrieveAll();\n            if (iVectorView == null)\n                win();\n            for (var i = 0; i < iVectorView.size; i++) {\n                vault.remove(iVectorView[i]);\n            }\n            win();\n        } catch (e) {\n            fail();\n        }\n    },\n    putString: function (win, fail, args) {\n        try {\n            var key = args[0];\n            var value = args[1];\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            vault.add(new Windows.Security.Credentials.PasswordCredential(service, key, value));\n            win(value);\n        } catch (e) {\n            fail(1);\n        }\n    },\n    getString: function (win, fail, args) {\n        try {\n            var key = args[0];\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            var passwordCredential = vault.retrieve(service, key);\n            win(passwordCredential.password);\n        } catch (e) {\n            fail(2);\n        }\n    },\n    putBoolean: function (win, fail, args) {\n        try {\n            var key = args[0];\n            var value = args[1];\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            vault.add(new Windows.Security.Credentials.PasswordCredential(service, key, value));\n            win(value);\n        } catch (e) {\n            fail(1);\n        }\n    },\n    getBoolean: function (win, fail, args) {\n        try {\n            var key = args[0];\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            var passwordCredential = vault.retrieve(service, key);\n            win(passwordCredential.password);\n        } catch (e) {\n            fail(2);\n        }\n    },\n    putInt: function (win, fail, args) {\n        try {\n            var key = args[0];\n            var value = args[1];\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            vault.add(new Windows.Security.Credentials.PasswordCredential(service, key, value));\n            win(value);\n        } catch (e) {\n            fail(1);\n        }\n    },\n    getInt: function (win, fail, args) {\n        try {\n            var key = args[0];\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            var passwordCredential = vault.retrieve(service, key);\n            win(parseInt(passwordCredential.password));\n        } catch (e) {\n            fail(2);\n        }\n    },\n    putDouble: function (win, fail, args) {\n        try {\n            var key = args[0];\n            var value = args[1];\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            vault.add(new Windows.Security.Credentials.PasswordCredential(service, key, value));\n            win(value);\n        } catch (e) {\n            fail(1);\n        }\n    },\n    getDouble: function (win, fail, args) {\n        try {\n            var key = args[0];\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            var passwordCredential = vault.retrieve(service, key);\n            win(passwordCredential.password);\n        } catch (e) {\n            fail(2);\n        }\n    },\n    remove: function (win, fail, args) {\n        try {\n            var key = args[0];\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            var passwordCredential = vault.retrieve(service, key);\n            if (passwordCredential) {\n                vault.remove(passwordCredential);\n            }\n            win(key);\n        } catch (e) {\n            fail(2);\n        }\n    },\n    keys: function (win, fail) {\n        try {\n            var vault = new Windows.Security.Credentials.PasswordVault();\n            var all = vault.retrieveAll();\n            var keys = [];\n            for(var i=0;i<all.Size;i++) {\n              keys.push(all.GetAt(i).UserName);\n            }\n            win(keys);\n        } catch (e) {\n            fail(2);\n        }\n    },\n};\n\nrequire(\"cordova/exec/proxy\").add(\"NativeStorage\", NativeStorageProxy);\n"}